#!/bin/bash

################################################################
# 
# Apache License 2.0
#
# This file will parse the Environment variables created by
# node containers linked to the varnish container
# and automatically create a default.vcl configuration file
# 
# The configuration file will create a load balancer and add
# each of the node containers linked.
#
# Varnish is not configured to use the reverse proxy features
# that it has, it just a load balancer.
#
################################################################


# Get the Environment variables and save them in the variable envs
envs=`printenv`

echo ${envs}

FILENAME=$1

# Remove the default.vcl file

echo 'vcl 4.0;

import directors;

backend default {
  .host = "127.0.0.1";
  .port = "8080";
  .connect_timeout = 60s;
  .first_byte_timeout = 60s;
  .between_bytes_timeout = 60s;
  .max_connections = 800;
}
  
sub vcl_recv {
  set req.http.grace = 120;
 
  # Set X-Forwarded-For header for logging in nginx
  unset req.http.X-Forwarded-For;
  set req.http.X-Forwarded-For = client.ip;
 
  # Remove has_js and CloudFlare/Google Analytics __* cookies and statcounter is_unique
  set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(_[_a-z]+|has_js|is_unique)=[^;]*", "");
  # Remove a ";" prefix, if present.
  set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");
 
  # Either the admin pages or the login
  if (req.url ~ "/wp-(login|admin|cron)") {
    # Dont cache, pass to backend
    return (pass);
  }
  if (req.method == "POST") {
    # Dont cache, pass to backend
    return (pass);
  } 
}' > ${FILENAME}.vcl
# Loop through all of our variables
for env in $envs
do
  # separate the name of the variable from the value
  IFS== read name value <<< "$env"  
  
  # if the variable has PORT_80_TCP_ADDR it means this is a
  # variable created by a node container linked to the varnish
  # container
  if [[ $name == *PORT_80_TCP_ADDR* ]]; then

# create a backend for each node container found in the variables
cat >> ${FILENAME}.vcl << EOF
  backend ${name} {
    .host = "${value}";
    .port = "80";
    .connect_timeout = 60s;
    .first_byte_timeout = 60s;
    .between_bytes_timeout = 60s;
    .max_connections = 800;
  }
  
EOF

  fi
done

# once we have all the containers ready, we create the
# load balancer, since we're gonna loop again, we just
# create the first line
cat >> ${FILENAME}.vcl << EOF

  
sub vcl_init {
    new cluster1 = directors.round_robin();

EOF

# loop again to add each backend created
for env in $envs
do
  IFS== read name value <<< "$env"  
  if [[ $name == *PORT_80_TCP_ADDR* ]]; then

  # create each backend in the load balancer
  cat >> ${FILENAME}.vcl << EOF
     cluster1.add_backend(${name}); 
EOF

  fi
done

# close the load balancer line
# and add the balancer as the req.backend
cat >> ${FILENAME}.vcl << EOF
}
  
sub vcl_backend_response {
   if (bereq.url ~ "\.(css|js|png|gif|jpg)$") {
     unset beresp.http.set-cookie;
     set beresp.ttl = 66h;
  }
}
  
sub vcl_recv {
    set req.backend_hint = cluster1.backend();
    if (req.method == "POST") {
      # Dont cache, pass to backend
      return (pass);
    }
}
EOF

cat ${FILENAME}.vcl

